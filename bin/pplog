#!/usr/bin/env python3

import sys
import json
import io

def C(c):
    a = '\033[' + str(c) + 'm'
    def q(t):
        return a + t + '\033[0m'
    return q

def skip_arg(f):  # we use first arg for unknown fields only
    def g(_, x):
        return f(x)
    return g

def preprocess_hints(h):
    m = {}
    for f, p, d in h:
        if f in m:
            raise Exception(f'Field {f} is already in map')
        if d is None:
            d = lambda x: x
        elif not callable(d):
            d = C(d)
        m[f] = (p, f, skip_arg(d))
    return m

# triplets:
# - field name
# - priority (order); default priority is 500
# - decoration: None, color code, or callable
HINTS = preprocess_hints((
    ('time', -1, None),
    ('ts', -1, None),
    ('env', -1, None),
    ('tag', -1, None),
    ('cluster_name', -1, None),
    ('type', 100, lambda x: C({
        'E': '33;41;1',
        'W': '33;1',
        'D': '35;1',
        }.get(x, '32;1'))(x)),
    ('function', 200, '34;1'),
    ('lineno', 201, '34;1'),
    ('comp', 210, '32;1'),
    ('scope', 211, 32),

    ('level', 20, lambda x: C({
        'info': '32;1',
        'error': '33;41;1',
    }.get(x.lower(), '33;1'))(x)),
    ('method', 31, '35;1'),

    ('component', 32, '35;1'),

    ('operation_type', 33, 35),
    ('caller', 40, 32),  # lambda x: '/'.join(x.split('/')[:])), # [:6]
    ('query', 100, 35),
    ('req', 101, '35;1'),
    ('msg', 1000, None),

    ('message', 1000, 1),
    ('error', 1001, '31;1'),
    ('data', 1400, 33),

    ('start_time', -1, None),
    ('time_finish', -1, None),
    ('time_took', -1, None),
))

def format_str(f):
    if not hasattr(f, 'lower'):  # str and unicode (Py2/3)
        f = json.dumps(f, ensure_ascii=False, indent=4, separators=(',', ': '), sort_keys=True)
    return f

def encode_line(rec):
    keys = (HINTS.get(k, (500, k, lambda k, v: k + '=\033[33;1m' + format_str(v) + '\033[0m')) for k in rec.keys())
    keys = sorted(k for k in keys if k[0] > 0)
    fields = (d(f, format_str(rec[f])) for _, f, d in keys)
    return ' '.join(fields)

def main():
    strim = io.TextIOWrapper(sys.stdin.buffer, errors='replace')
    while True:
        rec_text = strim.readline()
        if rec_text == '':
            break
        try:
            rec = json.loads(rec_text)
        except ValueError:
            rec = None
        if hasattr(rec, 'keys'):  # 'false' is valid JSON too
            try:
                line = encode_line(rec)
            except Exception as exc:
                line = '\033[30;41mException:\033[0m ' + repr(exc) + ' Raw: \033[31;1m' + rec_text + '\033[0m'
        else:
            line = rec_text.rstrip('\n\r')
            if '\033' not in line:
                line = '\033[31;1m' + line + '\033[0m'
        sys.stdout.write(line + '\n')
        sys.stdout.flush()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
