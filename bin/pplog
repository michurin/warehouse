#!/usr/bin/env python3

import sys
import json
import re
import io

date_re = re.compile(r'^([\d-]+)T([\d:]+)\..*')

HINTS = (
    ('time', -1, None, None),
    ('env', -1, None, None),
    ('tag', -1, None, None),
    ('cluster_name', -1, None, None),
    ('type', 100, None, lambda _, x: '\033[' + {
        'E': '33;41;1',
        'W': '33;1',
        }.get(x, '32;1') + 'm' + x + '\033[0m'),
    ('function', 200, '34;1', None),
    ('lineno', 200, '34;1', None),
    ('comp', 210, '32;1', None),
    ('scope', 211, '32', None),
#    ('ts', 10, '44;34;1', lambda _, x: date_re.sub(lambda t: t.group(1) + ' ' + t.group(2), x)),
#    ('level', 20, None, lambda _, x: '\033[' + {
#        'info': '32;1',
#        'error': '33;41;1',
#    }.get(x.lower(), '33;1') + 'm' + x + '\033[0m'),
#    ('comp', 30, '35;1', None),
#    ('method', 31, '35;1', None),
    ('component', 32, '35;1', None),
#    ('operation_type', 33, '35', None),
#    ('caller', 40, '32', None), # lambda _, x: '/'.join(x.split('/')[:])), # [:6]
#    ('query', 100, '35', None),
#    ('req', 101, '35;1', None),
#    ('msg', 1000, None, None),
    ('message', 1000, '1', None),
    ('error', 1001, '31;1', None),
    ('data', 1400, '33', None),
#    ('start_time', -1, None, None),
#    ('time_finish', -1, None, None),
#    ('time_took', -1, None, None),
)

HINTS_MAP = {t[0]: (t[1], t[0], t[2], t[3]) for t in HINTS}

def format_str(f):
    if not hasattr(f, 'lower'): # str and unicode (Py2/3)
        f = json.dumps(f, ensure_ascii=False, indent=4, separators=(',', ': '), sort_keys=True)
    return f

def format_field(f, k):
    _, fld, color, proc = k
    f = format_str(f)
    if proc is not None:
        f = proc(fld, f)
    if color is not None:
        f = '\033[' + color + 'm' + f + '\033[0m'
    return f

def encode_line(rec):
    keys = (HINTS_MAP.get(k, (500, k, None, lambda k, v: k + '=\033[33;1m' + format_str(v) + '\033[0m')) for k in rec.keys())
    keys = sorted(k for k in keys if k[0] > 0)
    fields = (format_field(rec[k[1]], k) for k in keys)
    return ' '.join(fields)

def main():
    strim = io.TextIOWrapper(sys.stdin.buffer, errors='replace')
    while True:
        rec_text = strim.readline()
        if rec_text == '':
            break
        try:
            rec = json.loads(rec_text)
        except ValueError:
            rec = None
        if hasattr(rec, 'keys'):  # 'false' is valid JSON too
            try:
                line = encode_line(rec)
            except Exception as exc:
                line = '\033[30;41mException:\033[0m ' + repr(exc) + ' Raw: \033[31;1m' + rec_text + '\033[0m'
        else:
            line = '\033[31;1m' + rec_text.rstrip('\n\r') + '\033[0m'
        sys.stdout.write(line + '\n')
        sys.stdout.flush()

if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        pass
